{
	"name": "nodemcu-tools",
	"publisher": "boressoft",
	"displayName": "NodeMCU-Tools",
	"description": "NodeMCU development tools for Visual Studio Code",
	"version": "5.0.0",
	"author": {
		"name": "Boris Gulay",
		"email": "boris@gulay.name"
	},
	"contributors": [
		{
			"name": "serg3295",
			"url": "https://github.com/serg3295"
		}
	],
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/BoresXP/nodemcu-tools.git"
	},
	"bugs": {
		"url": "https://github.com/BoresXP/nodemcu-tools/issues"
	},
	"engines": {
		"vscode": "^1.74.0",
		"node": ">=20.18.1"
	},
	"categories": [
		"Programming Languages",
		"Other"
	],
	"keywords": [
		"nodemcu",
		"iot",
		"lua",
		"esp8266",
		"esp32"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"icon": "./resources/icon.png",
	"main": "./out/extension.js",
	"l10n": "./l10n",
	"contributes": {
		"commands": [
			{
				"command": "nodemcu-tools.connect",
				"title": "%nodemcu-tools.connect.title%",
				"category": "NodeMCU"
			},
			{
				"command": "nodemcu-tools.disconnect",
				"title": "%nodemcu-tools.disconnect.title%",
				"category": "NodeMCU"
			},
			{
				"command": "nodemcu-tools.refreshTreeView",
				"title": "%nodemcu-tools.refreshTreeView.title%",
				"category": "NodeMCU",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "nodemcu-tools.deleteFile",
				"title": "%nodemcu-tools.deleteFile.title%",
				"category": "NodeMCU"
			},
			{
				"command": "nodemcu-tools.compileFile",
				"title": "%nodemcu-tools.compileFile.title%",
				"category": "NodeMCU",
				"enablement": "viewItem == nodemcu-file-lua"
			},
			{
				"command": "nodemcu-tools.runFile",
				"title": "%nodemcu-tools.runFile.title%",
				"category": "NodeMCU",
				"enablement": "viewItem =~ /^nodemcu-file-(lua|lc)$/",
				"icon": {
					"dark": "resources/dark/RunOutline.svg",
					"light": "resources/light/RunOutline.svg"
				}
			},
			{
				"command": "nodemcu-tools.uploadActiveFile",
				"title": "%nodemcu-tools.uploadActiveFile.title%",
				"category": "NodeMCU",
				"enablement": "editorTextFocus"
			},
			{
				"command": "nodemcu-tools.uploadFile",
				"title": "%nodemcu-tools.uploadFile.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder"
			},
			{
				"command": "nodemcu-tools.uploadFolderRename",
				"title": "%nodemcu-tools.uploadFolderRename.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && explorerResourceIsFolder"
			},
			{
				"command": "nodemcu-tools.uploadFolder",
				"title": "%nodemcu-tools.uploadFolder.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && explorerResourceIsFolder"
			},
			{
				"command": "nodemcu-tools.uploadFileAs",
				"title": "%nodemcu-tools.uploadFileAs.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder"
			},
			{
				"command": "nodemcu-tools.uploadFileCompile",
				"title": "%nodemcu-tools.uploadFileCompile.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder && resourceExtname == .lua"
			},
			{
				"command": "nodemcu-tools.compileFileUpload",
				"title": "%nodemcu-tools.compileFileUpload.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder && resourceExtname == .lua"
			},
			{
				"command": "nodemcu-tools.crossCompile",
				"title": "%nodemcu-tools.crossCompile.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder && resourceExtname == .lua"
			},
			{
				"command": "nodemcu-tools.downloadFile",
				"title": "%nodemcu-tools.downloadFile.title%",
				"category": "NodeMCU"
			},
			{
				"command": "nodemcu-tools.downloadFileAs",
				"title": "%nodemcu-tools.downloadFileAs.title%",
				"category": "NodeMCU"
			},
			{
				"command": "nodemcu-tools.uploadFileRun",
				"title": "%nodemcu-tools.uploadFileRun.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder && resourceExtname == .lua"
			},
			{
				"command": "nodemcu-tools.uploadFileSetLfs",
				"title": "%nodemcu-tools.uploadFileSetLfs.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder && resourceExtname == .img"
			},
			{
				"command": "nodemcu-tools.uploadFileSetLfsAs",
				"title": "%nodemcu-tools.uploadFileSetLfsAs.title%",
				"category": "NodeMCU",
				"enablement": "explorerViewletFocus && !explorerResourceIsFolder && resourceExtname == .img"
			},
			{
				"command": "nodemcu-tools.sendLine",
				"title": "%nodemcu-tools.sendLine.title%",
				"category": "NodeMCU",
				"enablement": "editorTextFocus",
				"icon": {
					"light": "resources/light/sendLine.svg",
					"dark": "resources/dark/sendLine.svg"
				}
			},
			{
				"command": "nodemcu-tools.sendBlock",
				"title": "%nodemcu-tools.sendBlock.title%",
				"category": "NodeMCU",
				"enablement": "editorTextFocus && editorHasSelection == true",
				"icon": {
					"light": "resources/light/sendBlock.svg",
					"dark": "resources/dark/sendBlock.svg"
				}
			}
		],
		"menus": {
			"editor/title": [
				{
					"command": "nodemcu-tools.sendLine",
					"when": "editorTextFocus && editorHasSelection == false && nodemcu-tools:isConnected",
					"group": "navigation"
				},
				{
					"command": "nodemcu-tools.sendBlock",
					"when": "editorTextFocus && editorHasSelection == true && nodemcu-tools:isConnected",
					"group": "navigation"
				}
			],
			"editor/context": [
				{
					"command": "nodemcu-tools.sendLine",
					"group": "nodemcu-tools@10",
					"when": "editorTextFocus && editorHasSelection == false && nodemcu-tools:isConnected"
				},
				{
					"command": "nodemcu-tools.sendBlock",
					"group": "nodemcu-tools@20",
					"when": "editorTextFocus && editorHasSelection == true && nodemcu-tools:isConnected"
				},
				{
					"command": "nodemcu-tools.uploadActiveFile",
					"group": "nodemcu-tools@30",
					"when": "editorTextFocus && nodemcu-tools:isConnected"
				}
			],
			"explorer/context": [
				{
					"command": "nodemcu-tools.uploadFile",
					"alt": "nodemcu-tools.uploadFileAs",
					"group": "nodemcu-tools@10",
					"when": "nodemcu-tools:isConnected"
				},
				{
					"command": "nodemcu-tools.uploadFolderRename",
					"alt": "nodemcu-tools.uploadFolder",
					"group": "nodemcu-tools@10",
					"when": "nodemcu-tools:isConnected"
				},
				{
					"command": "nodemcu-tools.uploadFileSetLfs",
					"alt": "nodemcu-tools.uploadFileSetLfsAs",
					"group": "nodemcu-tools@20",
					"when": "nodemcu-tools:isConnected"
				},
				{
					"command": "nodemcu-tools.uploadFileCompile",
					"alt": "nodemcu-tools.uploadFileRun",
					"group": "nodemcu-tools@20",
					"when": "nodemcu-tools:isConnected"
				},
				{
					"command": "nodemcu-tools.compileFileUpload",
					"alt": "nodemcu-tools.crossCompile",
					"group": "nodemcu-tools@30",
					"when": "nodemcu-tools:isConnected && nodemcu-tools:hasConfig"
				}
			],
			"view/title": [
				{
					"command": "nodemcu-tools.refreshTreeView",
					"when": "view == nodemcu-tools.devices",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "nodemcu-tools.connect",
					"when": "view == nodemcu-tools.devices && viewItem == nodemcu-device",
					"group": "nodemcu-tools"
				},
				{
					"command": "nodemcu-tools.disconnect",
					"when": "view == nodemcu-tools.devices && viewItem == nodemcu-device-connected",
					"group": "nodemcu-tools"
				},
				{
					"command": "nodemcu-tools.downloadFile",
					"alt": "nodemcu-tools.downloadFileAs",
					"when": "view == nodemcu-tools.devices && viewItem =~ /^nodemcu-file/",
					"group": "nodemcu-tools@10"
				},
				{
					"command": "nodemcu-tools.runFile",
					"when": "view == nodemcu-tools.devices && viewItem =~ /^nodemcu-file/",
					"group": "nodemcu-tools@20"
				},
				{
					"command": "nodemcu-tools.runFile",
					"when": "view == nodemcu-tools.devices && viewItem =~ /^nodemcu-file/",
					"group": "inline"
				},
				{
					"command": "nodemcu-tools.compileFile",
					"when": "view == nodemcu-tools.devices && viewItem =~ /^nodemcu-file/",
					"group": "nodemcu-tools@30"
				},
				{
					"command": "nodemcu-tools.deleteFile",
					"when": "view == nodemcu-tools.devices && viewItem =~ /^nodemcu-file/",
					"group": "nodemcu-tools@40"
				}
			]
		},
		"views": {
			"explorer": [
				{
					"id": "nodemcu-tools.devices",
					"name": "%nodemcu-tools.views.explorer.name%"
				}
			]
		},
		"configuration": {
			"title": "NodeMCU-Tools",
			"properties": {
				"nodemcu-tools.terminal.scrollbackSize": {
					"type": "number",
					"minimum": 10,
					"maximum": 1000,
					"default": 300,
					"description": "%nodemcu-tools.terminal.scrollbackSize.description%"
				},
				"nodemcu-tools.terminal.commandHistorySize": {
					"type": "number",
					"minimum": 0,
					"maximum": 100,
					"default": 30,
					"description": "%nodemcu-tools.terminal.commandHistorySize.description%"
				},
				"nodemcu-tools.snippets": {
					"type": "object",
					"default": {
						"Restart": "node.restart()",
						"Heap": "=node.heap()",
						"Globals": "local p,r,c,s=print,string.rep,0,' Regs: 'local function f(m,t)p(r('=',9)..m..r('=',9))for k,v in pairs(t)do p(k,v)c=type(k)=='number'and c+1 or c end;end;f(' _G ',_G)f(' package.loaded ',_G.package.loaded)f(s,debug.getregistry())p(s,c)collectgarbage()"
					},
					"description": "%nodemcu-tools.snippets.description%"
				},
				"nodemcu-tools.minifyLua.enabled": {
					"type": "boolean",
					"default": false,
					"description": "%nodemcu-tools.minifyLua.enabled.description%"
				},
				"nodemcu-tools.minifyJSON.enabled": {
					"type": "boolean",
					"default": false,
					"description": "%nodemcu-tools.minifyJSON.enabled.description%"
				},
				"nodemcu-tools.overwriteSnippets": {
					"type": "boolean",
					"default": true,
					"description": "%nodemcu-tools.overwriteSnippets.description%"
				},
				"nodemcu-tools.deviceFilterActive": {
					"type": "boolean",
					"default": true,
					"description": "%nodemcu-tools.deviceFilterActive.description%"
				},
				"nodemcu-tools.connectionDelay": {
					"type": "number",
					"minimum": 100,
					"maximum": 1000,
					"default": 0,
					"description": "%nodemcu-tools.connectionDelay.description%"
				}
			}
		},
		"jsonValidation": [
			{
				"fileMatch": [
					".nodemcutools"
				],
				"url": "%nodemcu-tools.jsonValidation.url%"
			}
		],
		"taskDefinitions": [
			{
				"type": "NodeMCU",
				"required": [
					"compilerExecutable",
					"include"
				],
				"properties": {
					"nodemcuTaskName": {
						"description": "Unique task name",
						"type": "string"
					},
					"compilerExecutable": {
						"markdownDescription": "Specifies the path to luac.cross executable. (e.g. *\"/opt/lua/esp8266/5.3/luac.cross\"* or *\"C:\\Temp\\luac.cross.exe\"*)",
						"type": "string"
					},
					"include": {
						"markdownDescription": "Specifies an array of filenames or patterns to include in the LFS image. (e.g. ./lfs/*.lua)",
						"type": "array",
						"items": {
							"type": "string"
						},
						"minItems": 1,
						"uniqueItems": true
					},
					"outDir": {
						"markdownDescription": "Specifies an output folder for all emitted files. Default is **./out**",
						"type": "string"
					},
					"outFile": {
						"markdownDescription": "Specifies an output LFS image file name. Default is **lfs.img**",
						"type": "string"
					},
					"resourceDir": {
						"markdownDescription": "Specifies the folder containing the files to be included in resource.lua (e.g. ./resource)",
						"type": "string"
					}
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "webpack --mode production",
		"build": "webpack --mode development",
		"lint": "eslint src"
	},
	"devDependencies": {
		"@eslint/js": "^9.18.0",
		"@stylistic/eslint-plugin": "^2.13.0",
		"@types/node": "^20.17.10",
		"@types/react": "^19.0.8",
		"@types/react-dom": "^19.0.3",
		"@types/vscode": "^1.74.0",
		"@types/webpack": "^5.28.5",
		"copy-webpack-plugin": "^12.0.2",
		"css-loader": "^7.1.2",
		"eslint": "^9.18.0",
		"eslint-import-resolver-typescript": "^3.7.0",
		"eslint-plugin-import-x": "^4.6.1",
		"eslint-plugin-optimize-regex": "^1.2.1",
		"eslint-plugin-promise": "^7.2.1",
		"eslint-plugin-react": "^7.37.4",
		"eslint-plugin-react-hooks": "^5.1.0",
		"eslint-plugin-sonarjs": "^3.0.1",
		"eslint-webpack-plugin": "^4.2.0",
		"fork-ts-checker-webpack-plugin": "^9.0.2",
		"globals": "^15.14.0",
		"style-loader": "^4.0.0",
		"stylis": "^4.3.5",
		"ts-loader": "^9.5.2",
		"ts-node": "^10.9.2",
		"typescript": "^5.6.3",
		"typescript-eslint": "^8.21.0",
		"webpack": "^5.97.1",
		"webpack-cli": "^6.0.1"
	},
	"dependencies": {
		"@serialport/bindings-cpp": "^13.0.1",
		"@vscode/l10n": "^0.0.18",
		"effector": "^23.2.3",
		"effector-react": "^23.3.0",
		"luamin": "github:FATH-Mechatronics/luamin#d735925",
		"react": "^19.0.0",
		"react-dom": "^19.0.0",
		"react-tooltip": "^5.28.0",
		"serialport": "^13.0.0",
		"styled-components": "^6.1.14"
	}
}
